name: Deployment to Performance Environment

on:
  push:
    branches:
      - main

jobs:
  prepare-deployment:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      deploy_branch: ${{ steps.create_branch.outputs.branch }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set commit hash for deployment
        id: set-hash
        run: echo "commit-hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Create local testing branch
        id: create_branch
        run: |
          TEMP_BRANCH="local-testing-${{ steps.set-hash.outputs.commit-hash }}"
          echo "branch=$TEMP_BRANCH" >> $GITHUB_OUTPUT
          git checkout -b $TEMP_BRANCH

      - name: Push the temporary branch to remote
        run: |
          git push -u origin ${{ steps.create_branch.outputs.branch }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  wait-for-approval-to-deploy:
    needs: prepare-deployment
    runs-on: ubuntu-latest
    environment: 
      name: perf
    steps:
      - name: Pause for manual approval
        run: echo "Deployment paused for manual approval in the 'perf' environment."

  deploy-to-performance:
    needs: wait-for-approval-to-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout deployment branch
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.prepare-deployment.outputs.deploy_branch }}

  wait-for-approval-post-testing:
    needs: deploy-to-performance
    runs-on: ubuntu-latest
    environment: 
      name: perf
    steps:
      - name: Pause for manual approval
        run: echo "Deployment paused for manual approval in the 'perf' environment."

  # merge-and-cleanup:
    # if: ${{ github.event.review.state == 'approved' }}
    # needs: wait-for-approval-post-QA-testing
    # runs-on: ubuntu-latest
    # steps:
      # # - name: Checkout release branch
        # # uses: actions/checkout@v2
        # # with:
          # # ref: release

      # - name: Merge to release branch
        # run: |
          # git checkout release
          # git merge ${{ needs.prepare-deployment.outputs.deploy_branch }}
          # git push origin release

    # - name: Merge changes into release
      # run: |
        # git config user.name "github-actions"
        # git config user.email "github-actions@github.com"
        # git merge ${{ needs.trigger-deployment.outputs.TEMP_BRANCH }} --no-ff -m "Merging approved changes into release"
        # git push origin release

    # - name: Cleanup temporary branch
      # uses: actions/github-script@v5
      # with:
        # script: |
          # github.git.deleteRef({
            # owner: context.repo.owner,
            # repo: context.repo.repo,
            # ref: 'heads/${{ needs.trigger-deployment.outputs.TEMP_BRANCH }}'
          # })

